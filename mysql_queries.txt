-- base tables

create table `RULES_REPO` (	
`DOMAIN`	VARCHAR(255),
`DQ_DIMENSION`	VARCHAR(255),
`RULE_ID`	VARCHAR(255) PRIMARY KEY,
`RULE_TYPE`	VARCHAR(255),
`RULE_NAME`	VARCHAR(255),
`RULE_DESCRIPTION`	VARCHAR(255),
`FAILED_DATA_TABLE_NAME`	VARCHAR(255) );

INSERT INTO RULES_REPO VALUES
('Vendor Master','Accuracy','DQ_VEN_001','Data Validation','RL_001_SPL_CHAR_CHK','Special char Check - ;:$#@%~^<>*+=?','VEN_001_SPL_CHAR'),
('Vendor Master','Accuracy','DQ_VEN_002','Standard Format','RL_001_DATETIME_CHK','To check for Valid Date time format','VEN_002_DATETIME'),
('Material Master','Validity','DQ_MAS_001','Data Validation','RL_001_FIELD_MISMATCH_CHK','Flagged if two fields are not equal','MAS_001_FIELD_MISMATCH'),
('Material Master','Conformity','DQ_MAS_002','Length','RL_001_LEN_CHK','Field must have data values with specified length of characters','MAS_002_LEN'),
('Customer Master','Conformity','DQ_CUS_001','Data Validation','RL_001_NUMERIC_CHK','Field must have only numeric data values','CUS_001_NUMERIC'),
('Customer Master','Completeness','DQ_CUS_002','Mandatory','RL_001_MANDATORY_CHK','Check Blank and Nulls for the columns','CUS_002_MANDATORY');


CREATE TABLE `RULE_BINDING` (
  `RULE_BINDING_ID` int NOT NULL AUTO_INCREMENT,
  `RULE_ID` VARCHAR(255),
  `TABLE_NAME` varchar(255),
  `COLUMN_NAME` varchar(255),
  `RULE_TYPE` varchar(255) DEFAULT NULL,
  `RULE_NAME` varchar(255) DEFAULT NULL,
  `BIND_DATE` datetime DEFAULT CURRENT_TIMESTAMP,
  `IS_ACTIVE` VARCHAR(1) DEFAULT 'Y',
  FOREIGN KEY (`RULE_ID`) REFERENCES `RULES_REPO`(`RULE_ID`),
  PRIMARY KEY (`RULE_BINDING_ID`),
  UNIQUE(`RULE_ID`,`TABLE_NAME`,`COLUMN_NAME`)
) ;


CREATE TABLE `RUN_HISTORY` (
  `RUN_ID` int NOT NULL auto_increment PRIMARY KEY,
  `RULE_ID` VARCHAR(255) DEFAULT NULL,
  `RULE_BINDING_ID` INT ,
  `TABLE_NAME` varchar(255) DEFAULT NULL,
  `COLUMN_NAME` varchar(255) DEFAULT NULL,
  `TOTAL_RECORDS` int DEFAULT NULL,
  `PASSED_RECORDS` int DEFAULT NULL,
  `FAILED_RECORDS` int DEFAULT NULL,
  `RUN_DATE` datetime DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`RULE_BINDING_ID`) REFERENCES `RULE_BINDING` (`RULE_BINDING_ID`),
  FOREIGN KEY (`RULE_ID`) REFERENCES `RULES_REPO` (`RULE_ID`)
) ;


CREATE TABLE TREND_CHART_BASE (NO_OF_DAYS_BACK INT);
INSERT INTO TREND_CHART_BASE VALUES (0),	(1),	(2),	(3),	(4),	(5),	(6),	(7),	(8),	(9),	(10),	(11),	(12),	(13),	(14),	(15),	(16),	(17),	(18),	(19),	(20),	(21),	(22),	(23),	(24),	(25),	(26),	(27),	(28),	(29),	(30),	(31),	(32),	(33),	(34),	(35),	(36),	(37),	(38),	(39),	(40),	(41),	(42),	(43),	(44),	(45),	(46),	(47),	(48),	(49),	(50),	(51),	(52),	(53),	(54),	(55),	(56),	(57),	(58),	(59),	(60),	(61),	(62),	(63),	(64),	(65),	(66),	(67),	(68),	(69),	(70),	(71),	(72),	(73),	(74),	(75),	(76),	(77),	(78),	(79),	(80),	(81),	(82),	(83),	(84),	(85),	(86),	(87),	(88),	(89),	(90),	(91),	(92),	(93),	(94),	(95),	(96),	(97),	(98),	(99),	(100),	(101),	(102),	(103),	(104),	(105),	(106),	(107),	(108),	(109),	(110),	(111),	(112),	(113),	(114),	(115),	(116),	(117),	(118),	(119),	(120),	(121),	(122),	(123),	(124),	(125),	(126),	(127),	(128),	(129),	(130),	(131),	(132),	(133),	(134),	(135),	(136),	(137),	(138),	(139),	(140),	(141),	(142),	(143),	(144),	(145),	(146),	(147),	(148),	(149),	(150),	(151),	(152),	(153),	(154),	(155),	(156),	(157),	(158),	(159),	(160),	(161),	(162),	(163),	(164),	(165),	(166),	(167),	(168),	(169),	(170),	(171),	(172),	(173),	(174),	(175),	(176),	(177),	(178),	(179);



-- views


CREATE VIEW `score_card_latest` 
AS 
select `run_history`.`RUN_ID` AS `RUN_ID`,
		`run_history`.`RULE_BINDING_ID` AS `RULE_BINDING_ID`,
        `rules_repo`.`RULE_ID` AS `RULE_ID`,
		`rules_repo`.`DQ_DIMENSION` AS `DQ_DIMENSION`,
        `rules_repo`.`RULE_NAME` AS `RULE_NAME`,
        `rules_repo`.`FAILED_DATA_TABLE_NAME` AS `FAILED_DATA_TABLE_NAME`,
        `run_history`.`TABLE_NAME` AS `TABLE_NAME`,
        `run_history`.`COLUMN_NAME` AS `COLUMN_NAME`,
        `run_history`.`TOTAL_RECORDS` AS `TOTAL_RECORDS`,
        `run_history`.`PASSED_RECORDS` AS `PASSED_RECORDS`,
        `run_history`.`FAILED_RECORDS` AS `FAILED_RECORDS`,
        `run_history`.`RUN_DATE` AS `LAST_RUN` 
        from (`rules_repo` join `run_history` on((`rules_repo`.`RULE_ID` = `run_history`.`RULE_ID`))) 
        where `run_history`.`RUN_ID` in (select max(`run_history`.`RUN_ID`) from `run_history` group by `run_history`.`RULE_BINDING_ID`) order by `rules_repo`.`DQ_DIMENSION`,`rules_repo`.`RULE_NAME`,`run_history`.`TABLE_NAME`,`run_history`.`COLUMN_NAME`;




CREATE VIEW `score_card_history` 
AS 
select `run_history`.`RUN_ID` AS `RUN_ID`,
		`run_history`.`RULE_BINDING_ID` AS `RULE_BINDING_ID`,
		`rules_repo`.`RULE_ID` AS `RULE_ID`,
        `rules_repo`.`DQ_DIMENSION` AS `DQ_DIMENSION`,
        `rules_repo`.`RULE_NAME` AS `RULE_NAME`,
        `rules_repo`.`FAILED_DATA_TABLE_NAME` AS `FAILED_DATA_TABLE_NAME`,
        `run_history`.`TABLE_NAME` AS `TABLE_NAME`,
        `run_history`.`COLUMN_NAME` AS `COLUMN_NAME`,
        `run_history`.`TOTAL_RECORDS` AS `TOTAL_RECORDS`,
        `run_history`.`PASSED_RECORDS` AS `PASSED_RECORDS`,
        `run_history`.`FAILED_RECORDS` AS `FAILED_RECORDS`,
        `run_history`.`RUN_DATE` AS `LAST_RUN` 
	from (`rules_repo` join `run_history` on((`rules_repo`.`RULE_ID` = `run_history`.`RULE_ID`))) 
    order by `rules_repo`.`DQ_DIMENSION`,`rules_repo`.`RULE_NAME`,`run_history`.`TABLE_NAME`,`run_history`.`COLUMN_NAME`;


-- stored procedures 


DELIMITER //
CREATE PROCEDURE `CREATE_CONDITION_FOR_ONE_FIELD`(IN IN_RULE_NAME VARCHAR(255), IN IN_FIELD_1 VARCHAR(255), OUT OUT_WHERE_CONDITION VARCHAR(255))
BEGIN
	-- DEFINE CONDITIONS THAT PASS A RECORD
	IF IN_RULE_NAME = 'RL_001_MANDATORY_CHK' THEN
		SET OUT_WHERE_CONDITION = CONCAT(IN_FIELD_1 ," IS NOT NULL AND length(trim(",IN_FIELD_1,") ) <> 0");
	ELSEIF IN_RULE_NAME = 'RL_001_SPL_CHAR_CHK' THEN
		SET OUT_WHERE_CONDITION = CONCAT(IN_FIELD_1," NOT REGEXP '[!@#$%^&*()]' AND ",IN_FIELD_1 ," IS NOT NULL AND length(trim(",IN_FIELD_1,") ) <> 0");
	ELSE 
		SET @V_ERROR_MESSAGE = CONCAT("No condition is defined for the rule : ",IN_RULE_NAME,". Please update the rule condition in procedure : CREATE_CONDITION_ONE_FIELD ");
		SIGNAL SQLSTATE '45000'; 
    END IF;
END//

DELIMITER //
CREATE PROCEDURE `BIND_ONE_FIELD_RULE`(IN IN_RULE_ID VARCHAR(255),IN IN_TABLE_NAME VARCHAR(255) , IN IN_COLUMN_NAME VARCHAR(255),IN IN_RULE_TYPE VARCHAR(255),IN IN_RULE_NAME VARCHAR(255),IN IN_EXECUTE_RULE INT)
BEGIN

	DECLARE DUPLICATE_RECORD_FOUND CONDITION FOR 1062;
    DECLARE EXIT HANDLER FOR DUPLICATE_RECORD_FOUND
    BEGIN
		SELECT 409 as STATUS_CODE,concat(IN_TABLE_NAME," - ",IN_COLUMN_NAME,' is already binded to rule : ', IN_RULE_NAME) AS MSG;
	END;
	SET @V_RULE_BINDING_ID =0;
    SET @V_BIND_DATE = SYSDATE();
     
	INSERT INTO RULE_BINDING (`RULE_ID`,`TABLE_NAME`,`COLUMN_NAME`,`RULE_TYPE`,`RULE_NAME`,`BIND_DATE`) VALUES (IN_RULE_ID,IN_TABLE_NAME, IN_COLUMN_NAME,IN_RULE_TYPE, IN_RULE_NAME,@V_BIND_DATE);
	 
	SELECT MAX(`RULE_BINDING_ID`)  INTO @V_RULE_BINDING_ID FROM RULE_BINDING;
    
	IF IN_EXECUTE_RULE =1 THEN
		CALL RUN_ONE_FIELD_RULE(@V_RULE_BINDING_ID);
	ELSE 
		SELECT 200 as STATUS_CODE,"Successfully Binded" as MSG;
	END IF;

END//


DELIMITER //
CREATE PROCEDURE `RUN_ONE_FIELD_RULE`(IN IN_RULE_BINDING_ID INT)
BEGIN

	DECLARE TABLE_NOT_FOUND_ERROR CONDITION FOR 1146;
    
    DECLARE EXIT HANDLER FOR SQLSTATE '45000'
    BEGIN
		SELECT 500 as STATUS_CODE,@V_ERROR_MESSAGE AS MSG;
    END;

    DECLARE EXIT HANDLER FOR TABLE_NOT_FOUND_ERROR
    BEGIN
    
			SET @FAILED_DATA_TABLE_QUERY = CONCAT(
				  "CREATE TABLE `",@V_FAILED_DATA_TABLE_NAME,"`(
				  `RUN_ID` int DEFAULT NULL,
				  `RULE_BINDING_ID` INT DEFAULT NULL,
				  `RULE_ID` varchar(255) DEFAULT NULL,
				  `TABLE_NAME` varchar(255) DEFAULT NULL,
				  `COLUMN_NAME` varchar(255) DEFAULT NULL,
				  `FAILED_RECORDS` varchar(255) DEFAULT NULL,
				  `RUN_DATE` datetime DEFAULT NULL,
				  FOREIGN KEY (`RUN_ID`) REFERENCES `RUN_HISTORY` (`RUN_ID`),
                  FOREIGN KEY (`RULE_BINDING_ID`) REFERENCES `RULE_BINDING` (`RULE_BINDING_ID`),
				  FOREIGN KEY (`RULE_ID`) REFERENCES `RULES_REPO` (`RULE_ID`)
                  
				)"
			);
			PREPARE FAILED_DATA_TABLE_QUERY FROM @FAILED_DATA_TABLE_QUERY;
			EXECUTE FAILED_DATA_TABLE_QUERY;
			DEALLOCATE PREPARE FAILED_DATA_TABLE_QUERY;
			
			PREPARE INSERT_QUERY2 FROM @INSERT_QUERY;
			EXECUTE INSERT_QUERY2;
			DEALLOCATE PREPARE INSERT_QUERY2;
            
            SELECT 200 as STATUS_CODE,"Rule Execution Successfull" AS MSG;
    END;

	SET @V_RULE_ID = '';
	SET @V_RULE_NAME = '';
    SET @V_TABLE_NAME = '';
    SET @V_COLUMN_NAME = '';
    SET @V_FAILED_DATA_TABLE_NAME = '';
    SET @V_RUN_ID = '';
    SET @V_BIND_DATE = SYSDATE();
    SET @V_ERROR_MESSAGE = '';
    
    SELECT `RULE_ID`,`RULE_NAME`,`TABLE_NAME`,`COLUMN_NAME` INTO @V_RULE_ID,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME FROM RULE_BINDING WHERE RULE_BINDING_ID = IN_RULE_BINDING_ID; 
    SELECT FAILED_DATA_TABLE_NAME INTO @V_FAILED_DATA_TABLE_NAME FROM RULES_REPO WHERE RULE_ID = @V_RULE_ID;
    
    CALL CREATE_CONDITION_FOR_ONE_FIELD(@V_RULE_NAME,@V_COLUMN_NAME,@V_WHERE_CONDITION);
    
    
	SET @TOTAL_RECORDS_QUERY = CONCAT("SELECT COUNT(*) INTO @TOTAL_RECORDS FROM " , @V_TABLE_NAME);
    PREPARE TOTAL_RECORDS_QUERY FROM @TOTAL_RECORDS_QUERY;
    EXECUTE TOTAL_RECORDS_QUERY;
    DEALLOCATE PREPARE TOTAL_RECORDS_QUERY;

    SET @PASSED_RECORDS_QUERY = CONCAT("SELECT COUNT(*) INTO @PASSED_RECORDS FROM ", @V_TABLE_NAME," WHERE ", @V_WHERE_CONDITION );
    PREPARE PASSED_RECORDS_QUERY FROM @PASSED_RECORDS_QUERY;
    EXECUTE PASSED_RECORDS_QUERY;
    DEALLOCATE PREPARE PASSED_RECORDS_QUERY;
    
    INSERT INTO RUN_HISTORY (`RULE_ID`,`RULE_BINDING_ID`,`TABLE_NAME`,`COLUMN_NAME`,`TOTAL_RECORDS`,`PASSED_RECORDS`,`FAILED_RECORDS`) VALUES
    (@V_RULE_ID,IN_RULE_BINDING_ID,@V_TABLE_NAME,@V_COLUMN_NAME,@TOTAL_RECORDS,@PASSED_RECORDS,@TOTAL_RECORDS-@PASSED_RECORDS);

	SELECT MAX(RUN_ID) INTO @V_RUN_ID FROM RUN_HISTORY;

    SET @INSERT_QUERY =  CONCAT(
         "INSERT INTO " , @V_FAILED_DATA_TABLE_NAME , " SELECT " , @V_RUN_ID ,',', IN_RULE_BINDING_ID, ' , "', @V_RULE_ID , '" , "' ,@V_TABLE_NAME, '" , "', @V_COLUMN_NAME, '" , ',  @V_COLUMN_NAME ,' , "', @V_BIND_DATE, '" FROM ' ,@V_TABLE_NAME," WHERE NOT (", @V_WHERE_CONDITION, ")");
    PREPARE INSERT_QUERY FROM @INSERT_QUERY;
    EXECUTE INSERT_QUERY;
    DEALLOCATE PREPARE INSERT_QUERY;
    
    SELECT 200 as STATUS_CODE,"Rule Execution Successfull" AS MSG;
END//



DELIMITER //
CREATE PROCEDURE DELETE_RULE_BINDING(IN IN_RULE_BINDING_ID INT)
BEGIN

    DECLARE TABLE_NOT_FOUND_ERROR CONDITION FOR 1146;
    DECLARE PREPARED_STATEMENT_ERROR CONDITION FOR 1243;
    DECLARE CONTINUE HANDLER FOR TABLE_NOT_FOUND_ERROR,PREPARED_STATEMENT_ERROR
    BEGIN
    END;

    SET @V_RULE_ID = '';
    SET @V_FAILED_DATA_TABLE_NAME = '';
    
    SELECT RULE_ID INTO @V_RULE_ID FROM RULE_BINDING WHERE RULE_BINDING_ID = IN_RULE_BINDING_ID;
    SELECT FAILED_DATA_TABLE_NAME INTO @V_FAILED_DATA_TABLE_NAME FROM RULES_REPO WHERE RULE_ID = @V_RULE_ID;

    SET @DEL_QUERY = CONCAT("DELETE FROM ",@V_FAILED_DATA_TABLE_NAME," WHERE RULE_BINDING_ID = ",IN_RULE_BINDING_ID); 
    PREPARE DEL_QUERY FROM @DEL_QUERY;
    EXECUTE DEL_QUERY;
    DEALLOCATE PREPARE DEL_QUERY;
    
    DELETE FROM RUN_HISTORY WHERE RULE_BINDING_ID = IN_RULE_BINDING_ID;
    DELETE FROM RULE_BINDING WHERE RULE_BINDING_ID = IN_RULE_BINDING_ID;
    
    SELECT 200 AS STATUS_CODE, 'Sucessfully Deleted!' as MSG;
END//



-- ALL NECESSARY PROCEDURES, FUNCTIONS, EVENTS AND VIEWS FOR POPULATING DATA FOR CHARTS


DELIMITER //
CREATE FUNCTION GET_LAST_FAILED_RECORD(IN_NO_OF_DAYS INT ,IN_RULE_NAME VARCHAR(255) ,IN_TABLE_NAME VARCHAR(255), IN_COLUMN_NAME VARCHAR(255) )
RETURNS INT
DETERMINISTIC
BEGIN
SET @FAILED_RECORDS = NULL;

SELECT FAILED_RECORDS INTO @FAILED_RECORDS
FROM SCORE_CARD_HISTORY
WHERE RULE_NAME  = IN_RULE_NAME AND TABLE_NAME = IN_TABLE_NAME  AND COLUMN_NAME = IN_COLUMN_NAME
AND DATE(LAST_RUN) <= DATE(SYSDATE() - INTERVAL IN_NO_OF_DAYS DAY)
ORDER BY LAST_RUN DESC LIMIT 1;

IF @FAILED_RECORDS IS NULL THEN
SET @FAILED_RECORDS = 0;
END IF;
RETURN @FAILED_RECORDS;
END//



CREATE OR REPLACE VIEW  UI_SCORE_CARD_TOP_TABLE_LATEST_DATA AS 
SELECT A.RULE_NAME,CONCAT(A.TABLE_NAME,' - ',A.COLUMN_NAME) AS 'RULE_BINDING',
GET_LAST_FAILED_RECORD(4,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_4_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(3,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_3_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(2,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_2_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(1,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_1_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(0,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_0_DAYS_BACK' ,
A.TABLE_NAME,A.COLUMN_NAME,B.DOMAIN,A.DQ_DIMENSION,B.RULE_TYPE,MAX(A.RUN_ID) AS 'LATEST_RUN_ID',B.FAILED_DATA_TABLE_NAME,SYSDATE() AS 'REFRESHSED_ON'
FROM SCORE_CARD_HISTORY A INNER JOIN RULES_REPO B ON A.RULE_ID = B.RULE_ID
GROUP BY A.RULE_NAME, A.TABLE_NAME,A.COLUMN_NAME,B.DOMAIN,A.DQ_DIMENSION,B.RULE_TYPE,B.FAILED_DATA_TABLE_NAME
ORDER BY RULE_NAME,TABLE_NAME,COLUMN_NAME,LAST_RUN DESC;



CREATE TABLE UI_SCORE_CARD_TOP_TABLE AS SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
 
CREATE TABLE TREND_CHART_DATA (RULE_NAME VARCHAR(255),`TABLE_NAME` VARCHAR(255),`COLUMN_NAME` VARCHAR(255),FAILED_RECORDS INT,`DATE` VARCHAR(10), `DATE2` DATE);




DELIMITER //
CREATE PROCEDURE REFRESH_SCORE_CARD_DATA() 
BEGIN
    DECLARE TABLE_NOT_FOUND CONDITION FOR 1146;
    DECLARE EXIT HANDLER FOR TABLE_NOT_FOUND
    BEGIN
	CREATE TABLE UI_SCORE_CARD_TOP_TABLE AS SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
    END;
    
    TRUNCATE TABLE UI_SCORE_CARD_TOP_TABLE;
	INSERT INTO UI_SCORE_CARD_TOP_TABLE SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
END //



DELIMITER //
CREATE PROCEDURE REFRESH_TREND_CHART_DATA()
BEGIN
DECLARE LOOP_NO INT DEFAULT (0);
DECLARE TABLE_NOT_FOUND CONDITION FOR 1146;
DECLARE CONTINUE HANDLER FOR TABLE_NOT_FOUND
BEGIN
CREATE TABLE TREND_CHART_DATA (
RULE_NAME VARCHAR(255),
`TABLE_NAME` VARCHAR(255),
`COLUMN_NAME` VARCHAR(255),
FAILED_RECORDS INT,
`DATE` VARCHAR(10), 
`DATE2` DATE);
END;

SELECT COUNT(*) INTO @MAX_LOOP_NO FROM UI_SCORE_CARD_TOP_TABLE;

TRUNCATE TABLE TREND_CHART_DATA;

INSERT_LOOP : LOOP
	IF LOOP_NO >= @MAX_LOOP_NO THEN
		LEAVE INSERT_LOOP;
    END IF;
    
    SELECT RULE_NAME,TABLE_NAME,COLUMN_NAME INTO @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME FROM UI_SCORE_CARD_TOP_TABLE LIMIT LOOP_NO,1;
	
    INSERT INTO TREND_CHART_DATA
	SELECT @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME,
	GET_LAST_FAILED_RECORD(NO_OF_DAYS_BACK,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME),
    DATE_FORMAT(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY,'%b-%d') AS `DATE`,
    DATE(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY) AS `DATE2`
	FROM TREND_CHART_BASE
	ORDER BY NO_OF_DAYS_BACK DESC;
    
    SET LOOP_NO = LOOP_NO+1;

END LOOP INSERT_LOOP;

END//


CREATE EVENT REFRESH_DATA
ON SCHEDULE EVERY 4 HOUR
COMMENT 'Used to refresh data for score_card_top_table in CIDM UI'
do CALL REFRESH_SCORE_CARD_DATA();

CREATE EVENT REFRESH_TREND_CHART_DATA_EVENT
ON SCHEDULE EVERY 12 HOUR
COMMENT 'event for refreshing latest trend chart data'
DO CALL REFRESH_TREND_CHART_DATA();




create or replace view pie_chart1_data as
select "Passed_Rules" as "Type" ,count(*) as"No_of_Rules" from score_card_latest where FAILED_RECORDS=0 
union all 
select "Failed_Rules" ,count(*)  from score_card_latest where FAILED_RECORDS!=0 ; 



create or replace view pie_chart2_data as
select  rule_name ,"Total_Records" as "Type" ,sum(`Total_records`) as "No_of_Records" from score_card_latest group by rule_name
union all 
select rule_name , "Failed_Records" ,sum(`Failed_records`)  from score_card_latest group by rule_name; 



-- base queries for getting trend chart data for a rule binding


-- for 1 month data
SELECT *
FROM TREND_CHART_DATA
WHERE DATE2 >= SYSDATE() - INTERVAL (DAY(SYSDATE())) DAY
AND TABLE_NAME = '<table name>'
AND COLUMN_NAME = '<column name>'
ORDER BY DATE2;


-- for 3 months data
SELECT *
FROM TREND_CHART_DATA
WHERE DATE2 >= SYSDATE() - INTERVAL 3 MONTH
AND TABLE_NAME = '<table name>' 
AND COLUMN_NAME = 'FLGDEFAULT'
ORDER BY DATE2;

-- for 6 months data
SELECT *
FROM TREND_CHART_DATA
WHERE TABLE_NAME = '<table name>' 
AND COLUMN_NAME = 'FLGDEFAULT'
ORDER BY DATE2;




-- OLD FUNCTION AND VIEWS FOR TREND CHART, MAY BE USED LATER WHEN NEEDED

delimiter //
create function group_by_last_n_months(in_date datetime , no_of_months int)
returns varchar(70)
deterministic
begin
set @diff =  (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months) + (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months !=0);
if @diff = 0 then 
	set @diff = 1; 
end if;
return concat(monthname(sysdate() - interval (@diff -1)*no_of_months month),'-',date_format(in_date,'%Y'));
end//


delimiter //
create function group_by_last_n_months_weight(in_date datetime , no_of_months int)
returns int
deterministic
begin
set @diff =  (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months) + (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months !=0);
if @diff = 0 then 
	set @diff = 1; 
end if;
return diff;
end//




create or replace view trend_chart_data_1_months as
SELECT RULE_NAME,group_by_last_n_months(LAST_RUN,1) as `MONTH_YEAR`,
	   group_by_last_n_months_weight(LAST_RUN,1) as `ORDER`,
	   SUM(TOTAL_RECORDS) AS TOTAL_RECORDS,
       SUM(PASSED_RECORDS) AS PASSED_RECORDS,
       SUM(FAILED_RECORDS) AS FAILED_RECORDS,
       ROUND(SUM(PASSED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `PASS_PERCENTAGE`,
       ROUND(SUM(FAILED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `FAIL_PERCENTAGE`
FROM score_card_history
GROUP BY RULE_NAME,group_by_last_n_months(LAST_RUN,1),group_by_last_n_months_weight(LAST_RUN,1)
ORDER BY group_by_last_n_months_weight(LAST_RUN,1) DESC;


create or replace view trend_chart_data_3_months as
SELECT RULE_NAME,group_by_last_n_months(LAST_RUN,3) as `MONTH_YEAR`,
	   group_by_last_n_months_weight(LAST_RUN,3) as `ORDER`,
	   SUM(TOTAL_RECORDS) AS TOTAL_RECORDS,
       SUM(PASSED_RECORDS) AS PASSED_RECORDS,
       SUM(FAILED_RECORDS) AS FAILED_RECORDS,
       ROUND(SUM(PASSED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `PASS_PERCENTAGE`,
       ROUND(SUM(FAILED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `FAIL_PERCENTAGE`
FROM score_card_history
GROUP BY RULE_NAME,group_by_last_n_months(LAST_RUN,3),group_by_last_n_months_weight(LAST_RUN,3)
ORDER BY group_by_last_n_months_weight(LAST_RUN,3) DESC;


create or replace view trend_chart_data_6_months as
SELECT RULE_NAME,group_by_last_n_months(LAST_RUN,6) as `MONTH_YEAR`,
	   group_by_last_n_months_weight(LAST_RUN,6) as `ORDER`,
	   SUM(TOTAL_RECORDS) AS TOTAL_RECORDS,
       SUM(PASSED_RECORDS) AS PASSED_RECORDS,
       SUM(FAILED_RECORDS) AS FAILED_RECORDS,
       ROUND(SUM(PASSED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `PASS_PERCENTAGE`,
       ROUND(SUM(FAILED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `FAIL_PERCENTAGE`
FROM score_card_history
GROUP BY RULE_NAME,group_by_last_n_months(LAST_RUN,6),group_by_last_n_months_weight(LAST_RUN,6)
ORDER BY group_by_last_n_months_weight(LAST_RUN,6) DESC;



